name: Sonar Continuous Integration

env:
  DOTNET_VERSION: '8.x'
  SONAR_ORG: 'pu03-pl3'        
  SONAR_PROJECT: 'Nestor'     
  PACKAGE_VERSION: '1.0.0'         

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  sonarqube:
    name: Sonarcloud + Pack + Publish NuGet + Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java (para Sonar)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dotnet-sonarscanner
        run: dotnet tool install -g dotnet-sonarscanner

      - name: Ejecutar pruebas y cobertura
        working-directory: Bank
        run: |
          dotnet restore Bank.sln
          dotnet build Bank.sln --no-restore
          dotnet test Bank.sln --no-build --collect:"XPlat Code Coverage;Format=opencover"

      - name: Begin SonarScanner
        run: |
          dotnet sonarscanner begin /k:"${{ env.SONAR_PROJECT }}" /o:"${{ env.SONAR_ORG }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.qualitygate.wait=true

      - name: Build
        run: dotnet build Bank/Bank.sln --no-incremental

      - name: End SonarScanner
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Pack NuGet package
        run: dotnet pack ./Bank.Domain/Bank.Domain.csproj -c Release -o ./nuget /p:PackageVersion=${{ env.PACKAGE_VERSION }}

      - name: Publish NuGet to GitHub Packages
        run: |
          dotnet nuget push ./nuget/*.nupkg --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate

      - name: Create tag v${{ env.PACKAGE_VERSION }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41744140+github-actions[bot]@users.noreply.github.com"
          git tag -a v${{ env.PACKAGE_VERSION }} -m "Release v${{ env.PACKAGE_VERSION }}" || echo "tag exists"
          git push origin v${{ env.PACKAGE_VERSION }} || echo "push tag failed or already exists"

      - name: Generate release notes (last 50 commits)
        id: gen_notes
        run: |
          git --no-pager log -n 50 --pretty=format:'- %s' > release_notes.md
          echo "::set-output name=body::$(sed 's/^/ /' release_notes.md | sed ':a;N;$!ba;s/\n/%0A/g')"

      - name: Create GitHub Release (auto notes)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          name: "v${{ env.PACKAGE_VERSION }}"
          body: ${{ steps.gen_notes.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
